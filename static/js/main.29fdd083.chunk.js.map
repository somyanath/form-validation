{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["emailRegex","RegExp","firstNameRegex","phoneRegex","validCheck","errors","rest","valid","Object","values","forEach","val","length","App","props","handleSubmit","e","preventDefault","state","firstName","document","getElementById","lastName","email","password","phone","address","value","match","setState","console","log","render","className","error","this","onSubmit","noValidate","htmlFor","type","id","placeholder","ype","Component","Boolean","window","location","hostname","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+gBAGA,IAAMA,EAAaC,OAAO,6EACpBC,EAAiBD,OAAO,eACxBE,EAAaF,OAAO,cAEpBG,EAAa,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAWC,EAAW,0BACtCC,GAAQ,EAYZ,OATAC,OAAOC,OAAOJ,GAAQK,SAAQ,SAAAC,GAC5BA,EAAIC,OAAS,IAAML,GAAQ,MAI7BC,OAAOC,OAAOH,GAAMI,SAAQ,SAAAC,GAClB,OAARA,IAAiBJ,GAAQ,MAGpBA,GAGYM,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAoBRC,aAAe,SAACC,GACdA,EAAEC,iBACF,IAAIZ,E,yVAAM,IAAQ,EAAKa,MAAMb,QAEzBc,EAAYC,SAASC,eAAe,aACpCC,EAAWF,SAASC,eAAe,YACnCE,EAAQH,SAASC,eAAe,SAChCG,EAAWJ,SAASC,eAAe,YACnCI,EAAQL,SAASC,eAAe,SAChCK,EAAUN,SAASC,eAAe,WAEtChB,EAAOc,UACsB,IAA3BA,EAAUQ,MAAMf,OAAe,WAC7BO,EAAUQ,MAAMf,OAAS,EAAI,gCAAkCO,EAAUQ,MAAMC,MAAM1B,GAAkB,GAAK,4BAEhHG,EAAOiB,SACqB,IAA1BA,EAASK,MAAMf,OAAe,WAC5BU,EAASK,MAAMf,OAAS,EAAI,gCAAkCU,EAASK,MAAMC,MAAM1B,GAAkB,GAAK,4BAE9GG,EAAOkB,MACkB,IAAvBA,EAAMI,MAAMf,OAAe,WACzBW,EAAMI,MAAMf,OAAS,EAAI,gCAAkCW,EAAMI,MAAMC,MAAM5B,GAAc,GAAK,wBAEpGK,EAAOmB,SACqB,IAA1BA,EAASG,MAAMf,OAAe,WAC5BY,EAASG,MAAMf,OAAS,EAAI,gCAAkC,GAElEP,EAAOoB,MACkB,IAAvBA,EAAME,MAAMf,OAAe,WACA,KAAvBa,EAAME,MAAMf,OAAiB,iCAAmCa,EAAME,MAAMC,MAAMzB,GAAc,GAAK,uBAE3GE,EAAOqB,QACoB,IAAzBA,EAAQC,MAAMf,OAAe,WAC3Bc,EAAQC,MAAMf,OAAS,GAAK,iCAAmC,GAEnE,EAAKiB,SAAS,CACZxB,SACAc,UAAWA,EAAUQ,MACrBL,SAAUA,EAASK,MACnBJ,MAAOA,EAAMI,MACbH,SAAUA,EAASG,MACnBF,MAAOA,EAAME,MACbD,QAASA,EAAQC,QAGfvB,EAAW,EAAKc,QAClBY,QAAQC,IAAR,wDAEgB,EAAKb,MAAMC,UAF3B,gCAGe,EAAKD,MAAMI,SAH1B,4BAIW,EAAKJ,MAAMK,MAJtB,+BAKc,EAAKL,MAAMM,SALzB,4BAMW,EAAKN,MAAMO,MANtB,8BAOa,EAAKP,MAAMQ,QAPxB,aAUA,EAAKM,OAAS,WACZ,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,QACb,2DACA,iEAMRH,QAAQI,MAAM,yCArFhB,EAAKhB,MAAQ,CACXC,UAAW,KACXG,SAAU,KACVC,MAAO,KACPC,SAAU,KACVC,MAAO,KACPC,QAAS,KACTrB,OAAQ,CACNc,UAAW,GACXG,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,MAAO,GACPC,QAAS,KAhBI,E,sEA4FT,IACArB,EAAW8B,KAAKjB,MAAhBb,OAER,OACE,yBAAK4B,UAAU,WACb,yBAAKA,UAAU,QACb,4CACA,0BAAMG,SAAUD,KAAKpB,aAAcsB,YAAU,GAC3C,yBAAKJ,UAAU,aACb,2BAAOK,QAAQ,aAAf,cACA,2BACEL,UAAW5B,EAAOc,UAAUP,OAAS,EAAI,QAAU,KACnD2B,KAAK,OACLC,GAAG,YACHC,YAAY,aACZJ,YAAU,IAEXhC,EAAOc,UAAUP,OAAS,GACzB,0BAAMqB,UAAU,gBAAgB5B,EAAOc,YAG3C,yBAAKc,UAAU,YACb,2BAAOK,QAAQ,YAAf,aACA,2BACEL,UAAW5B,EAAOiB,SAASV,OAAS,EAAI,QAAU,KAClD8B,IAAI,OACJF,GAAG,WACHC,YAAY,YACZJ,YAAU,IAEXhC,EAAOiB,SAASV,OAAS,GACxB,0BAAMqB,UAAU,gBAAgB5B,EAAOiB,WAG3C,yBAAKW,UAAU,SACb,2BAAOK,QAAQ,SAAf,SACA,2BACEL,UAAW5B,EAAOkB,MAAMX,OAAS,EAAI,QAAU,KAC/C2B,KAAK,QACLC,GAAG,QACHC,YAAY,QACZJ,YAAU,IAEXhC,EAAOkB,MAAMX,OAAS,GACrB,0BAAMqB,UAAU,gBAAgB5B,EAAOkB,QAG3C,yBAAKU,UAAU,YACb,2BAAOK,QAAQ,YAAf,YACA,2BACEL,UAAW5B,EAAOmB,SAASZ,OAAS,EAAI,QAAU,KAClD2B,KAAK,WACLC,GAAG,WACHC,YAAY,WACZJ,YAAU,IAEXhC,EAAOmB,SAASZ,OAAS,GACxB,0BAAMqB,UAAU,gBAAgB5B,EAAOmB,WAG3C,yBAAKS,UAAU,SACb,2BAAOK,QAAQ,SAAf,SACA,2BACEL,UAAW5B,EAAOoB,MAAMb,OAAS,EAAI,QAAU,KAC/C2B,KAAK,OACLC,GAAG,QACHC,YAAY,QACZJ,YAAU,IAEXhC,EAAOoB,MAAMb,OAAS,GACrB,0BAAMqB,UAAU,gBAAgB5B,EAAOoB,QAG3C,yBAAKQ,UAAU,WACb,2BAAOK,QAAQ,WAAf,WACA,2BACEL,UAAW5B,EAAOqB,QAAQd,OAAS,EAAI,QAAU,KACjD2B,KAAK,OACLC,GAAG,UACHC,YAAY,UACZJ,YAAU,IAEXhC,EAAOqB,QAAQd,OAAS,GACvB,0BAAMqB,UAAU,gBAAgB5B,EAAOqB,UAG3C,yBAAKO,UAAU,eACb,4BAAQM,KAAK,UAAb,uB,GApLmBI,aCXbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAAShB,OAAO,kBAAC,EAAD,MAASZ,SAASC,eAAe,SD2H3C,kBAAmB4B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.29fdd083.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst emailRegex = RegExp(/^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\nconst firstNameRegex = RegExp(/^[a-zA-Z]+$/);\nconst phoneRegex = RegExp(/^[0-9]{10}/);\n\nconst validCheck = ({ errors, ...rest }) => {\n  let valid = true;\n\n  // validate form errors being empty\n  Object.values(errors).forEach(val => {\n    val.length > 0 && (valid = false);\n  });\n\n  // validate the form was filled out\n  Object.values(rest).forEach(val => {\n    val === null && (valid = false);\n  });\n\n  return valid;\n};\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      firstName: null,\n      lastName: null,\n      email: null,\n      password: null,\n      phone: null,\n      address: null,\n      errors: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n        phone: \"\",\n        address: \"\"\n      }\n    };\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let errors = { ...this.state.errors };\n\n    let firstName = document.getElementById(\"firstName\");\n    let lastName = document.getElementById(\"lastName\");\n    let email = document.getElementById(\"email\");\n    let password = document.getElementById(\"password\");\n    let phone = document.getElementById(\"phone\");\n    let address = document.getElementById(\"address\");\n\n    errors.firstName =\n      firstName.value.length === 0 ? \"Required\" :\n        firstName.value.length < 3 ? \"Minimum 3 characters required\" : firstName.value.match(firstNameRegex) ? \"\" : \"Please use alphabets only\";\n\n    errors.lastName =\n      lastName.value.length === 0 ? \"Required\" :\n        lastName.value.length < 3 ? \"Minimum 3 characters required\" : lastName.value.match(firstNameRegex) ? \"\" : \"Please use alphabets only\";\n\n    errors.email =\n      email.value.length === 0 ? \"Required\" :\n        email.value.length < 3 ? \"Minimum 3 characters required\" : email.value.match(emailRegex) ? \"\" : \"Invalid email address\";\n\n    errors.password =\n      password.value.length === 0 ? \"Required\" :\n        password.value.length < 6 ? \"Minimum 6 characters required\" : \"\";\n\n    errors.phone =\n      phone.value.length === 0 ? \"Required\" :\n        !(phone.value.length === 10) ? \"Exactly 10 characters required\" : phone.value.match(phoneRegex) ? \"\" : \"Invalid phone number\";\n\n    errors.address =\n      address.value.length === 0 ? \"Required\" :\n        address.value.length < 15 ? \"Minimum 15 characters required\" : \"\";\n\n    this.setState({\n      errors,\n      firstName: firstName.value,\n      lastName: lastName.value,\n      email: email.value,\n      password: password.value,\n      phone: phone.value,\n      address: address.value\n    });\n\n    if (validCheck(this.state)) {\n      console.log(`\n        --SUBMITTING--\n        First Name: ${this.state.firstName}\n        Last Name: ${this.state.lastName}\n        Email: ${this.state.email}\n        Password: ${this.state.password}\n        Phone: ${this.state.phone}\n        Address: ${this.state.address}\n      `);\n\n      this.render = () => {\n        return (\n          <div className=\"wrapper\">\n            <div className=\"form\">\n              <h1>Thank You for Contacting Us</h1>\n              <h1>We will get back to you soon!</h1>\n            </div>\n          </div>\n        )\n      }\n    } else {\n      console.error(\"FORM INVALID - DISPLAY ERROR MESSAGE\");\n    }\n  }\n\n  render() {\n    const { errors } = this.state;\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"form\">\n          <h1>Contact Form</h1>\n          <form onSubmit={this.handleSubmit} noValidate>\n            <div className=\"firstName\">\n              <label htmlFor=\"firstName\">First Name</label>\n              <input\n                className={errors.firstName.length > 0 ? \"error\" : null}\n                type=\"text\"\n                id=\"firstName\"\n                placeholder=\"First Name\"\n                noValidate\n              />\n              {errors.firstName.length > 0 && (\n                <span className=\"errorMessage\">{errors.firstName}</span>\n              )}\n            </div>\n            <div className=\"lastName\">\n              <label htmlFor=\"lastName\">Last Name</label>\n              <input\n                className={errors.lastName.length > 0 ? \"error\" : null}\n                ype=\"text\"\n                id=\"lastName\"\n                placeholder=\"Last Name\"\n                noValidate\n              />\n              {errors.lastName.length > 0 && (\n                <span className=\"errorMessage\">{errors.lastName}</span>\n              )}\n            </div>\n            <div className=\"email\">\n              <label htmlFor=\"email\">Email</label>\n              <input\n                className={errors.email.length > 0 ? \"error\" : null}\n                type=\"email\"\n                id=\"email\"\n                placeholder=\"Email\"\n                noValidate\n              />\n              {errors.email.length > 0 && (\n                <span className=\"errorMessage\">{errors.email}</span>\n              )}\n            </div>\n            <div className=\"password\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                className={errors.password.length > 0 ? \"error\" : null}\n                type=\"password\"\n                id=\"password\"\n                placeholder=\"Password\"\n                noValidate\n              />\n              {errors.password.length > 0 && (\n                <span className=\"errorMessage\">{errors.password}</span>\n              )}\n            </div>\n            <div className=\"phone\">\n              <label htmlFor=\"phone\">Phone</label>\n              <input\n                className={errors.phone.length > 0 ? \"error\" : null}\n                type=\"text\"\n                id=\"phone\"\n                placeholder=\"Phone\"\n                noValidate\n              />\n              {errors.phone.length > 0 && (\n                <span className=\"errorMessage\">{errors.phone}</span>\n              )}\n            </div>\n            <div className=\"address\">\n              <label htmlFor=\"address\">Address</label>\n              <input\n                className={errors.address.length > 0 ? \"error\" : null}\n                type=\"text\"\n                id=\"address\"\n                placeholder=\"Address\"\n                noValidate\n              />\n              {errors.address.length > 0 && (\n                <span className=\"errorMessage\">{errors.address}</span>\n              )}\n            </div>\n            <div className=\"submit-form\">\n              <button type=\"submit\">Submit Form</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}